{"version":3,"sources":["components/fetchGhost.module.css","logo.svg","components/fetchGhost.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","containerDiv","postDiv","postDivBorder","postDivPadding","imgDiv","img","textDiv","text","__webpack_require__","p","api","GhostContentAPI","url","key","version","shorten","words","arguments","length","undefined","split","slice","concat","join","FetchGhost","_ref","onFetched","_useState","useState","_useState2","Object","slicedToArray","posts","setPosts","useEffect","fetchGhost","then","d","WithImage","_ref2","post","react_default","a","createElement","className","styles","style","width","height","src","feature_image","alt","excerpt","NoImage","_ref3","justifyContent","fontSize","fontWeight","padding","map","browse","catch","e","console","log","App","state","_this2","this","setState","logo","href","target","rel","fetchGhost_FetchGhost","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.442d9919.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerDiv\":\"fetchGhost_containerDiv__38Y-R\",\"postDiv\":\"fetchGhost_postDiv__3hh3g\",\"postDivBorder\":\"fetchGhost_postDivBorder__1GGS5\",\"postDivPadding\":\"fetchGhost_postDivPadding__3hp4y\",\"imgDiv\":\"fetchGhost_imgDiv__3AP3f\",\"img\":\"fetchGhost_img__1CHJu\",\"textDiv\":\"fetchGhost_textDiv__d0doP\",\"text\":\"fetchGhost_text__1q3DW\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport GhostContentAPI from \"@tryghost/content-api\";\n\nimport styles from \"./fetchGhost.module.css\";\n\nconst api = new GhostContentAPI({\n  url: \"https://gatsby-starter-blog-admin.now.sh\",\n  key: \"53321cfbcc9440e2c7554b0c91\",\n  version: \"v2\"\n});\n\nconst shorten = (text, words = 30) => {\n  return text\n    .split(\" \")\n    .slice(0, words)\n    .concat([\"...more\"])\n    .join(\" \");\n};\n\nexport const FetchGhost = ({ onFetched }) => {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetchGhost().then(d => {\n      setPosts(d);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (onFetched) onFetched(posts);\n  }, [posts]);\n\n  const WithImage = ({ post }) => {\n    return (\n      <div className={styles.postDiv}>\n        <div\n          className={styles.postDivBorder}\n          style={{ width: 300, height: 400 }}\n        >\n          <div className={styles.postDivPadding}>\n            <div className={styles.imgDiv} style={{ height: 300 }}>\n              <img className={styles.img} src={post.feature_image} alt=\"img\" />\n            </div>\n            <div className={styles.textDiv}>\n              <p className={styles.text}>{shorten(post.excerpt)}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const NoImage = ({ post }) => {\n    return (\n      <div className={styles.postDiv}>\n        <div\n          className={styles.postDivBorder}\n          style={{ width: 300, height: 400 }}\n        >\n          <div\n            className={styles.postDivPadding}\n            style={{ justifyContent: \"center\" }}\n          >\n            <div className={styles.textDiv}>\n              <p\n                className={styles.text}\n                style={{ fontSize: \"1.3rem\", fontWeight: 200, padding: 30 }}\n              >\n                {shorten(post.excerpt)}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={styles.containerDiv}>\n      {posts.map(p => {\n        if (p.feature_image) {\n          return <WithImage post={p} />;\n        } else {\n          return <NoImage post={p} />;\n        }\n      })}\n    </div>\n  );\n};\n\nconst fetchGhost = () => {\n  return api.posts\n    .browse()\n    .then(posts => {\n      return posts;\n    })\n    .catch(e => console.log(e));\n};\n\nexport default fetchGhost;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport fetchGhost, { FetchGhost } from \"./components/fetchGhost\";\nclass App extends Component {\n  state = { posts: [] };\n  componentDidMount() {\n    fetchGhost().then(d => this.setState({ posts: d }));\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <FetchGhost />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}